<%@ jet
    imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    java.util.HashMap
" 
%>

<%
class TKafkaOutputUtil {
	
	 private INode node;
	 
	 private INode connNode;
	 
	 private TSetKeystoreUtil tSetKeystoreUtil;

    private TSetKeystoreUtil tSetKeystoreUtilSchemaRegistry;

    private IConnection incomingConnection;

    private Map<String, String> kafkaProducerProperties;

    public TKafkaOutputUtil(INode node) {
        this.node = node;
        this.connNode = Boolean.valueOf(ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__"))
            ? ElementParameterParser.getLinkedNodeValue(node, "__CONNECTION__")
            : node;
		  this.tSetKeystoreUtil = new TSetKeystoreUtil(connNode);
        // reuse kafka ssl settings for schema registry if ssl for kafka is enabled
        this.tSetKeystoreUtilSchemaRegistry = new TSetKeystoreUtil(connNode);
        if (!useHttps()) {
            // If ssl for kafka is disabled - use schema registry's own keystore settings
            INode schemaRegistryKeystoreSettingsNode = ElementParameterParser.getLinkedNodeValue(node, "__SCHEMA_REGISTRY_KEYSTORE_SETTINGS__");
            this.tSetKeystoreUtilSchemaRegistry.setSettingsNode(schemaRegistryKeystoreSettingsNode);
        }
        this.incomingConnection = findIncomingConnection();
        this.kafkaProducerProperties = findKafkaProducerProperties();
    }
    
    public String getInStructName() {
		return this.incomingConnection.getName() + "Struct";
	 }

    public String getEncoding() {
        return ElementParameterParser.getValue(node, "__ENCODING__");
    }

    public String getBrokerList() {
        return ElementParameterParser.getValue(connNode, "__BROKER_LIST__");
    }

    public String getCompression() {
        String compression = "none";
        if ("true".equals(ElementParameterParser.getValue(node, "__COMPRESS__"))) {
            compression = ElementParameterParser.getValue(node, "__COMPRESSION__").toLowerCase();
        }
        return compression;
    }

    public IConnection getIncomingConnection() {
        return this.incomingConnection;
    }

    public Map<String, String> getKafkaProducerProperties() {
        return this.kafkaProducerProperties;
    }

    public String getKafkaTopic() {
        return ElementParameterParser.getValue(node, "__KAFKA_TOPIC__");
    }

    public String getIncomingColumnName() {
        return this.incomingConnection.getMetadataTable().getListColumns().get(0).getLabel();
    }
    
    public TSetKeystoreUtil getTSetKeystoreUtil() {
        return tSetKeystoreUtil;
    }
    
    public String getSecurityProtocol() {
			if (useHttps()) {
				return useKrb() ? "SASL_SSL" : "SSL";
			} else {
				return useKrb() ? "SASL_PLAINTEXT" : "PLAINTEXT";
			}
    }

    public boolean useHttps() {
        return "true".equals(ElementParameterParser.getValue(connNode, "__USE_HTTPS__"));
    }

    public boolean useKrb() {
			return "true".equals(ElementParameterParser.getValue(connNode, "__USE_KRB__"));
    }
    
    public String getJAASConf() {
    		return ElementParameterParser.getValue(connNode, "__JAAS_CONF__");
    }
    
    public String getKrbServiceName() {
    		return ElementParameterParser.getValue(connNode, "__KRB_SERVICE_NAME__");
    }
    
    public boolean isSetKinitPath() {
			return "true".equals(ElementParameterParser.getValue(connNode, "__SET_KINIT_PATH__"));
    }
    
    public String getKinitPath() {
    		return ElementParameterParser.getValue(connNode, "__KINIT_PATH__");
    }
    
    public boolean isSetKrb5Conf() {
			return "true".equals(ElementParameterParser.getValue(connNode, "__SET_KRB5_CONF__"));
    }
    
    public String getKrb5Conf() {
    		return ElementParameterParser.getValue(connNode, "__KRB5_CONF__");
    }

    public boolean isSetKeystore() {
        return "true".equals(ElementParameterParser.getValue(connNode, "__SET_KEYSTORE__"));
    }

    public boolean isKafkaVersion(String... versions) {
    	String kafkaVersion = ElementParameterParser.getValue(connNode, "__KAFKA_VERSION__");
            for (String version : versions) {
                if(version.equals(kafkaVersion)){
                    return true;
                }
            }
            return false;
//            return java.util.Arrays.stream(versions).anyMatch(kafkaVersion::equals);
    }

    public boolean applySecurityPropertiesAfterAdvanced() {
        return "true".equals(ElementParameterParser.getValue(node, "__APPLY_SECURITY_PROPERTIES_AFTER_ADVANCED__"));
    }

    public boolean useProducerRecord() {
        return "PRODUCER_RECORD".equals(ElementParameterParser.getValue(node, "__INPUT_TYPE__"));
    }

    public boolean useSchemaRegistry() {
        return "true".equals(ElementParameterParser.getValue(node, "__USE_SCHEMA_REGISTRY__"));
    }

    public String getSchemaRegistryUrl() {
        return ElementParameterParser.getValue(node, "__SCHEMA_REGISTRY_URL__");
    }

    public boolean useSchemaRegistryBasicAuth() {
        return "true".equals(ElementParameterParser.getValue(node, "__SCHEMA_REGISTRY_BASIC_AUTH__"));
    }

    public String getSchemaRegistryUsername() {
        return ElementParameterParser.getValue(node, "__SCHEMA_REGISTRY_USERNAME__");
    }

    public String getSchemaRegistryPassword() {
        return ElementParameterParser.getPasswordValue(node, "__SCHEMA_REGISTRY_PASSWORD__");
    }

    public boolean isSchemaRegistrySetKeystore() {
        return "true".equals(ElementParameterParser.getValue(node, "__SCHEMA_REGISTRY_SET_KEYSTORE__"));
    }

    public String getSchemaRegistryKeySerializer() {
        return ElementParameterParser.getValue(node, "__SCHEMA_REGISTRY_KEY_SERIALIZER__");
    }

    public String getSchemaRegistryCustomKeySerializer() {
        return ElementParameterParser.getValue(node, "__SCHEMA_REGISTRY_CUSTOM_KEY_SERIALIZER__");
    }

    public String getSchemaRegistryValueSerializer() {
        return ElementParameterParser.getValue(node, "__SCHEMA_REGISTRY_VALUE_SERIALIZER__");
    }

    public String getSchemaRegistryCustomValueSerializer() {
        return ElementParameterParser.getValue(node, "__SCHEMA_REGISTRY_CUSTOM_VALUE_SERIALIZER__");
    }

    private IConnection findIncomingConnection() {
        IConnection result = null;
        if (node.getIncomingConnections() != null) {
            for (IConnection in : node.getIncomingConnections()) {
                if (in.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
                    result = in;
                    break;
                }
            }
        }
        return result;
    }

    private Map<String, String> findKafkaProducerProperties() {
        Map<String, String> result = new HashMap<String, String>();

        // Basic configuration
        result.put("\"bootstrap.servers\"", getBrokerList());
        result.put("\"compression.type\"", "\"" + getCompression() + "\"");
        result.put("\"security.protocol\"", "\"" + getSecurityProtocol() + "\"");

        setProducerRecordProps(result);
        setSchemaRegistryProps(result);

        if (applySecurityPropertiesAfterAdvanced()) {
            setCustomProps(result);
            setSecurityProps(result);
        } else {
            setSecurityProps(result);
            setCustomProps(result);
        }

        return result;
    }

    private void setSecurityProps(Map<String, String> result) {
        // SSL configuration
        if (useHttps() && isSetKeystore() && tSetKeystoreUtil.useHTTPS()) {
            if (tSetKeystoreUtil.needTrustStore()) {
                result.put("\"ssl.truststore.type\"", tSetKeystoreUtil.getTrustStoreType());
                result.put("\"ssl.truststore.location\"", tSetKeystoreUtil.getTrustStorePath());
                result.put("\"ssl.truststore.password\"", tSetKeystoreUtil.getTrustStorePassword());
            }
            
            if (tSetKeystoreUtil.needClientAuth()) {
                result.put("\"ssl.keystore.type\"", tSetKeystoreUtil.getKeyStoreType());
                result.put("\"ssl.keystore.location\"", tSetKeystoreUtil.getKeyStorePath());
                result.put("\"ssl.keystore.password\"", tSetKeystoreUtil.getKeyStorePassword());
            }
        }

        // Kerberos configuration
        if (useKrb()) {
            result.put("\"sasl.kerberos.service.name\"", getKrbServiceName());
            if (isSetKinitPath()) {
                result.put("\"sasl.kerberos.kinit.cmd\"", getKinitPath());
            }
        }
    }

    private void setProducerRecordProps(Map<String, String> result) {
        // If input type is ProducerRecord - serialize key, value as byte[] by default
        if (useProducerRecord() && isKafkaVersion("KAFKA_3_2_3")) {
            result.put("\"key.serializer\"", "\"org.apache.kafka.common.serialization.ByteArraySerializer\"");
            result.put("\"value.serializer\"", "\"org.apache.kafka.common.serialization.ByteArraySerializer\"");
        }
    }

    private void setSchemaRegistryProps(Map<String, String> result) {
        if (useSchemaRegistry() && useProducerRecord() && isKafkaVersion("KAFKA_3_2_3")) {
            // Schema registry
            result.put("\"schema.registry.url\"", getSchemaRegistryUrl());
            if (useSchemaRegistryBasicAuth()) {
                result.put("\"basic.auth.credentials.source\"", "\"USER_INFO\"");
                String userInfo = getSchemaRegistryUsername() + " + ':' + " + getSchemaRegistryPassword();
                result.put("\"basic.auth.user.info\"", userInfo);
            }
            if ((useHttps() && isSetKeystore() || !useHttps() && isSchemaRegistrySetKeystore())
                    && tSetKeystoreUtilSchemaRegistry.useHTTPS()) {
                result.put("\"schema.registry.ssl.truststore.type\"", tSetKeystoreUtilSchemaRegistry.getTrustStoreType());
                result.put("\"schema.registry.ssl.truststore.location\"", tSetKeystoreUtilSchemaRegistry.getTrustStorePath());
                result.put("\"schema.registry.ssl.truststore.password\"", tSetKeystoreUtilSchemaRegistry.getTrustStorePassword());
                if (tSetKeystoreUtilSchemaRegistry.needClientAuth()) {
                    result.put("\"schema.registry.ssl.keystore.type\"", tSetKeystoreUtilSchemaRegistry.getKeyStoreType());
                    result.put("\"schema.registry.ssl.keystore.location\"", tSetKeystoreUtilSchemaRegistry.getKeyStorePath());
                    result.put("\"schema.registry.ssl.keystore.password\"", tSetKeystoreUtilSchemaRegistry.getKeyStorePassword());
                }
            }
            if ("AVRO".equals(getSchemaRegistryKeySerializer())) {
                result.put("\"key.serializer\"", "\"io.confluent.kafka.serializers.KafkaAvroSerializer\"");
            } else {
                result.put("\"key.serializer\"", getSchemaRegistryCustomKeySerializer());
            }
            if ("AVRO".equals(getSchemaRegistryValueSerializer())) {
                result.put("\"value.serializer\"", "\"io.confluent.kafka.serializers.KafkaAvroSerializer\"");
            } else {
                result.put("\"value.serializer\"", getSchemaRegistryCustomValueSerializer());
            }
        }
    }

    private void setCustomProps(Map<String, String> result) {
        List<Map<String, String>> producerPropertiesFromStudio = (List<Map<String, String>>) ElementParameterParser
                .getObjectValue(node, "__KAFKA_PRODUCER_PROPERTIES__");
        if(producerPropertiesFromStudio != null) {
            for (Map<String, String> producerPropertyFromStudio : producerPropertiesFromStudio) {
                result.put(producerPropertyFromStudio.get("PROPERTY"), producerPropertyFromStudio.get("VALUE"));
            }
        }
    }
}
%>