<%@ jet 
    imports="
        org.talend.core.model.process.INode 
        org.talend.core.model.process.ElementParameterParser 
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.metadata.IMetadataTable 
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.metadata.types.JavaTypesManager
        java.util.List
        java.util.Map
    "
%>
<%
    CodeGeneratorArgument inputCodeGenArgument = (CodeGeneratorArgument) argument;
    INode inputNode = (INode)inputCodeGenArgument.getArgument();
    String inputCid = inputNode.getUniqueName();
    
    boolean useExistingConnection = "true".equals(ElementParameterParser.getValue(inputNode,"__USE_EXISTING_CONNECTION__"));
    boolean dieOnError = "true".equals(ElementParameterParser.getValue(inputNode, "__DIE_ON_ERROR__"));
%>
    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/DB/Input/HelpClass.javajet"%>
<%

    class DBInputBeginUtil extends DefaultDBInputUtil {
        public void setURL(INode node) {
            String theDistribution = ElementParameterParser.getValue(node, "__DISTRIBUTION__");
            String theVersion = ElementParameterParser.getValue(node, "__IMPALA_VERSION__");

            org.talend.hadoop.distribution.component.HiveComponent hiveDistrib = null;
            try {
                hiveDistrib = (org.talend.hadoop.distribution.component.HiveComponent) org.talend.hadoop.distribution.DistributionFactory.buildDistribution(theDistribution, theVersion);
            } catch (java.lang.Exception e) {
                e.printStackTrace();
                throw new IllegalStateException("Unexpected Error: Hive Distribution can not be found for '"+theDistribution+"-"+theVersion+"'");

            }
            boolean isCustom = hiveDistrib instanceof org.talend.hadoop.distribution.custom.CustomDistribution;
            String javaDbDriver = "org.apache.hadoop.hive.jdbc.HiveDriver";				        
                        
            String additionalJdbcSettings = ElementParameterParser.getValue(node, "__IMPALA_ADDITIONAL_JDBC__");	
            
            String hiveVersion = ElementParameterParser.getValue(node, "__HIVE_VERSION__");
            String fsDefaultName = "fs.default.name";
            String impalaDriver = ElementParameterParser.getValue(node, "__IMPALA_DRIVER__");
            String impalaDbProtocol = "hive2";

            boolean setMapredJT = "true".equals(ElementParameterParser.getValue(node, "__SET_MAPRED_JT__"));
            boolean setNamenode = "true".equals(ElementParameterParser.getValue(node, "__SET_FS_DEFAULT_NAME__"));
            List<Map<String, String>> hadoopProps = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__HADOOP_ADVANCED_PROPERTIES__");

            boolean useYarn = "true".equals(ElementParameterParser.getValue(node, "__USE_YARN__"));

            boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
            boolean securityIsEnabled = useKrb && ( isCustom || hiveDistrib.doSupportKerberos() );
            String impalaPrincipal = ElementParameterParser.getValue(node, "__IMPALA_PRINCIPAL__");
            
            boolean useKeytab = "true".equals(ElementParameterParser.getValue(node, "__USE_KEYTAB__"));
            String userPrincipal = ElementParameterParser.getValue(node, "__PRINCIPAL__");
            String keytabPath = ElementParameterParser.getValue(node, "__KEYTAB_PATH__");
            
            boolean useSsl = "true".equals(ElementParameterParser.getValue(node, "__USE_SSL__"));
            String sslTrustStore = ElementParameterParser.getValue(node, "__SSL_TRUST_STORE__");
            String sslStorepasswordFieldName = "__SSL_TRUST_STORE_PASSWORD__";
            
            boolean useLDAP = !("".equals(ElementParameterParser.getValue(node, "__PASS__")) || "\"\"".equals(ElementParameterParser.getValue(node, "__PASS__")));

            boolean configureFromClassPath = "true".equals(ElementParameterParser.getValue(node, "__CONFIGURATIONS_FROM_CLASSPATH__"));
            boolean storeByHBase = "true".equals(ElementParameterParser.getValue(node, "__STORE_BY_HBASE__"));
           String sslSyntaxe=""; 

            if(impalaDriver!=null && !"".equals(impalaDriver.trim()) && (isCustom || hiveDistrib.doSupportHive2())) {
                impalaDriver = impalaDriver.toLowerCase();
                if ("hive2".equalsIgnoreCase(impalaDriver)) {
                    javaDbDriver = "org.apache.hive.jdbc.HiveDriver";
                    impalaDbProtocol="hive2";
                    sslSyntaxe=";ssl=true";
                }
                if ("impala".equalsIgnoreCase(impalaDriver)) {
                    javaDbDriver = "com.cloudera.impala.jdbc.Driver";
                    impalaDbProtocol="impala";
                    sslSyntaxe=";ssl=1";
                }	
            } else {
                throw new IllegalArgumentException("impala can not work with Hive1");
            }

              // When configuraing from the classpath we do not set the variables using System.setProperty
              // We set them directly on the Hadoop Configuration object
            if((hadoopProps!=null && hadoopProps.size() > 0) && (!configureFromClassPath)) {
                if(securityIsEnabled) {
%>
          org.apache.hadoop.conf.Configuration conf_<%=cid%> = new org.apache.hadoop.conf.Configuration();
<%
                }
                for(Map<String, String> item : hadoopProps){
%>
          System.setProperty(<%=item.get("PROPERTY") %> ,<%=item.get("VALUE") %>);
<%
                      if(securityIsEnabled) {
%>
            conf_<%=cid%>.set(<%=item.get("PROPERTY") %> ,<%=item.get("VALUE") %>);
<%
                      }
                }
                if(securityIsEnabled) {
%>
          org.apache.hadoop.security.UserGroupInformation.setConfiguration(conf_<%=cid%>);
          org.apache.hadoop.security.UserGroupInformation.getLoginUser();
<%
                }
            }

            if(setNamenode && !configureFromClassPath) {
                String namenode = ElementParameterParser.getValue(node, "__FS_DEFAULT_NAME__");
%>
            System.setProperty("<%=fsDefaultName%>", <%=namenode%>);
<%
            } 

            boolean setHadoopUser = "true".equals(ElementParameterParser.getValue(node, "__SET_HADOOP_USER__"));
            if (setHadoopUser) {
                String hadoopUser = ElementParameterParser.getValue(node, "__HADOOP_USER__");
                %>
          String username_<%=cid %> = <%=hadoopUser%>;
          if(username_<%=cid %>!=null && !"".equals(username_<%=cid %>.trim())) {
                System.setProperty("HADOOP_USER_NAME",username_<%=cid %>);
          }
                <%
            }
            %>
          globalMap.put("HADOOP_USER_NAME_<%=cid%>", System.getProperty("HADOOP_USER_NAME"));
          <%
          if ("hive2".equalsIgnoreCase(impalaDriver)) {
            %>
            org.apache.hadoop.conf.Configuration conf_<%=cid%> = new org.apache.hadoop.conf.Configuration();
            
            String hiveServer2KerberosPrincipal_<%=cid%> = <%=impalaPrincipal%>;
                     
            <%

          }
            // User the classpath to infer Kerberos parameters
            // BEGIN IF03
            if(configureFromClassPath) {
%>
                    String url_<%=cid%> = "jdbc:<%=impalaDbProtocol%>://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%> + ";";

                    // Add HADOOP_CONF_DIR to the classpath if it's present
                    String hadoopConfDir_<%=cid%> = System.getenv("HADOOP_CONF_DIR");
                    if(hadoopConfDir_<%=cid%> != null){
                        final java.net.URL[] urlHadoop = new java.net.URL[] { new java.io.File(hadoopConfDir_<%=cid%>).toURI().toURL() };
                        final ClassLoader threadClassLoader = Thread.currentThread().getContextClassLoader();
                        final java.net.URLClassLoader newThreadClassLoader = new java.net.URLClassLoader(urlHadoop, threadClassLoader);
                        Thread.currentThread().setContextClassLoader(newThreadClassLoader);
                    }
                    org.apache.hadoop.conf.Configuration conf_<%=cid%> = new org.apache.hadoop.conf.Configuration();

                    // Adding any talend-site.xml files on the classpath
                    conf_<%=cid%>.addResource("talend-site.xml");
                    String tldHiveKerberosAuth = conf_<%=cid%>.get("talend.kerberos.authentication", "");
                    String tldHiveKerberosKtPrincipal = conf_<%=cid%>.get("talend.kerberos.keytab.principal", "");
                    String tldHiveKerberosKtPath = conf_<%=cid%>.get("talend.kerberos.keytab.path", "");
                    String tldHiveEnc = conf_<%=cid%>.get("talend.encryption", "");
                    String tldHiveSslTsPath = conf_<%=cid%>.get("talend.ssl.trustStore.path", "");
                    String tldHiveSslTsPassword = conf_<%=cid%>.get("talend.ssl.trustStore.password", "");

                    // Add configurations from hive-site.xml
                    conf_<%=cid%>.addResource("hive-site.xml");

                    // Add configurations from yarn-site.xml
                    conf_<%=cid%>.addResource("yarn-site.xml");

                    // Add configurations from mapred-site.xml
                    conf_<%=cid%>.addResource("mapred-site.xml");

                    // Add configurations from hdfs-site.xml
                    conf_<%=cid%>.addResource("hdfs-site.xml");
<%
                    if(storeByHBase){
%>
                        // Add configurations from hbase-site.xml
                        conf_<%=cid%>.addResource("hbase-site.xml");
<%
                    }

                    // Set advanced hadoop properties
                    if(hadoopProps.size() > 0) {
                        for(Map<String, String> item : hadoopProps){
%>
                        conf_<%=cid%>.set(<%=item.get("PROPERTY") %> ,<%=item.get("VALUE") %>);
<%
                        }
                    }

                    // log all loaded xxx-site.xml files and all of the key value pairs for debugging
                    if(isLog4jEnabled){
%>
                        log.debug("CLASSPATH_CONFIGURATION_<%=cid%>" + " Loaded : " + conf_<%=cid%>);
                        log.debug("CLASSPATH_CONFIGURATION_<%=cid%>" + " key value pairs : ");
                        java.util.Iterator<java.util.Map.Entry<String,String>> iterator_log_<%=cid%> = conf_<%=cid%>.iterator();
                        while(iterator_log_<%=cid%>.hasNext()){
                            java.util.Map.Entry<String,String> property = iterator_log_<%=cid%>.next();
                            log.debug("CLASSPATH_CONFIGURATION_<%=cid%> " + property.getKey() + " : " + property.getValue());
                        }
<%
                    }
%>
                    if(org.apache.hadoop.security.UserGroupInformation.isSecurityEnabled()){

                        String urlKerberosParameter = "";
                        
                        <%if("impala".equalsIgnoreCase(impalaDbProtocol)){%>
                                 String krbServiceName_<%=cid%>  = (hiveServer2KerberosPrincipal_<%=cid%>.split("/")[0]);
                                 String krbHostFQDN_<%=cid%> = (hiveServer2KerberosPrincipal_<%=cid%>.split("/")[1].split("@")[0]);
                                 String krbRealm_<%=cid%> = (hiveServer2KerberosPrincipal_<%=cid%>.split("/")[1].split("@")[1]);
                             
                                 urlKerberosParameter_<%=cid%> = ";AuthMech=1" 
                                                      + ";KrbServiceName=" + krbServiceName_<%=cid%>
                                                      + ";KrbHostFQDN=" + krbHostFQDN_<%=cid%>
                                                      + ";KrbRealm=" + krbRealm_<%=cid%>;
                        <%}else{%>
                                 urlKerberosParameter = ";principal=" + hiveServer2KerberosPrincipal_<%=cid%>;
                          <%}%>
                          
                        // Keytab configurations
                        if(tldHiveKerberosAuth.equalsIgnoreCase("keytab")){
                            org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(tldHiveKerberosKtPrincipal, tldHiveKerberosKtPath);
                        }

                        // SSL configurations
                        if(tldHiveEnc.equalsIgnoreCase("ssl")){
<%
                            if (hiveDistrib.doSupportSSLwithKerberos()) {
%>
                                url_<%=cid%> += urlKerberosParameter + "<%=sslSyntaxe%>" +";sslTrustStore=" + tldHiveSslTsPath + ";trustStorePassword=" + tldHiveSslTsPassword;
<%
                            } else {
%>
                                url_<%=cid%> += urlKerberosParameter + ";sasl.qop=auth-conf";
<%
                            }
%>
                        } else {
                            url_<%=cid%> += urlKerberosParameter;
                        }

                    }else{

                        // SSL configurations
                        if(tldHiveEnc.equalsIgnoreCase("ssl")){
                            url_<%=cid%> += ";ssl=1" +";sslTrustStore=" + tldHiveSslTsPath + ";trustStorePassword=" + tldHiveSslTsPassword;
                        }
                    }
<%
            // END IF03
            // BEGIN IF04
            } else {
                    // BEGIN IF 06
                    if (securityIsEnabled) {
                        if (useKeytab) {
%>
                        org.apache.hadoop.security.UserGroupInformation ugi_<%=cid%> = org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytabAndReturnUGI(<%=userPrincipal%>, <%=keytabPath%>);
                        <% } %>
                        
                        
                        
                        <% if("impala".equalsIgnoreCase(impalaDbProtocol)){ %>
                            org.apache.hadoop.conf.Configuration conf_<%=cid%> = new org.apache.hadoop.conf.Configuration();
                            conf_<%=cid%>.set("hadoop.security.authentication", "kerberos");
                            org.apache.hadoop.security.UserGroupInformation.setConfiguration(conf_<%=cid%>);
                            String krbServiceName_<%=cid%>  = (<%=impalaPrincipal%>.split("/")[0]);
                            String krbHostFQDN_<%=cid%> = (<%=impalaPrincipal%>.split("/")[1].split("@")[0]);
                            String krbRealm_<%=cid%> = (<%=impalaPrincipal%>.split("/")[1].split("@")[1]);
                            String urlKerberosParameter_<%=cid%> = ";AuthMech=1"
                                    + ";KrbServiceName=" + krbServiceName_<%=cid%>
                                    + ";KrbHostFQDN=" + krbHostFQDN_<%=cid%>
                                    + ";KrbRealm=" + krbRealm_<%=cid%>;

                        <% 
                        } else { 
                            %>
                            String urlKerberosParameter_<%=cid%> = ";principal=" + hiveServer2KerberosPrincipal_<%=cid%>;
                            <% 
                        } %>	
                          
                          String url_<%=cid%> = "jdbc:<%=impalaDbProtocol%>://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%> + urlKerberosParameter_<%=cid%>;							
                        
<%
                        // Using SSL in Secure Mode
                        if (useSsl && hiveDistrib.doSupportSSL()) {
                            // Does the distrib support SSL + KERBEROS
                            if (hiveDistrib.doSupportSSLwithKerberos()) {
                                if (ElementParameterParser.canEncrypt(node, sslStorepasswordFieldName)) {
%>
                                    String decryptedSslStorePassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, sslStorepasswordFieldName)%>);
<%
                                } else {
%>
                                    String decryptedSslStorePassword_<%=cid%> = <%= ElementParameterParser.getValue(node, sslStorepasswordFieldName)%>;

                                <% } %>
                                
                
                                url_<%=cid%> += ";ssl=1" +";sslTrustStore=" + <%=sslTrustStore%> + ";trustStorePassword=" + decryptedSslStorePassword_<%=cid%>;
<%
                            // Does the distrib support only SASL-QOP + KERBEROS
                            } else {
%>
                                url_<%=cid%> += sasl.qop=auth-conf";
<%
                            }
                        } else {
%>
                            url_<%=cid%> = "jdbc:<%=impalaDbProtocol%>://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%> + urlKerberosParameter_<%=cid%>;
<%
                        }
                    // END IF06
                    // BEGIN IF07
                    } else {
                        //Using SSL in non Secure Mode
                        if(useSsl && hiveDistrib.doSupportSSL()){
                            if (ElementParameterParser.canEncrypt(node, sslStorepasswordFieldName)) {
%>
                            String decryptedSslStorePassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, sslStorepasswordFieldName)%>);
<%
                            } else {
%>
                            String decryptedSslStorePassword_<%=cid%> = <%= ElementParameterParser.getValue(node, sslStorepasswordFieldName)%>;
<%
                            }
%>
                            String url_<%=cid%> = "jdbc:<%=impalaDbProtocol%>://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%>+ "<%=sslSyntaxe%>" +";sslTrustStore=" + <%=sslTrustStore%> + ";trustStorePassword=" + decryptedSslStorePassword_<%=cid%>;
<%
                        } else if (useLDAP) {
%>
                            String url_<%=cid%> = "jdbc:<%=impalaDbProtocol%>://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%>;
<%
                        }  else {
%>
                            String url_<%=cid%> = "jdbc:<%=impalaDbProtocol%>://" + <%=dbhost%> + ":" + <%=dbport%> + "/" + <%=dbname%> + ";auth=noSasl";
<%
                        }
                    // END IF07
                    }
                // END IF04
                }
%>
                String additionalJdbcSettings_<%=cid%> = <%=additionalJdbcSettings%>;
                if (!"".equals(additionalJdbcSettings_<%=cid%>.trim())) {
                    if (!additionalJdbcSettings_<%=cid%>.startsWith(";")) {
                        additionalJdbcSettings_<%=cid%> = ";" + additionalJdbcSettings_<%=cid%>;
                    }
                    url_<%=cid%> += additionalJdbcSettings_<%=cid%>;
                }
                log.info(url_<%=cid%>);
                final String con_url_<%=cid%> = url_<%=cid%>;
<%	
        }
        
        public void createConnection(INode node, boolean needUserAndPassword) {
            cid = node.getUniqueName();
            dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
            dbhost = ElementParameterParser.getValue(node, "__HOST__");
            dbport = ElementParameterParser.getValue(node, "__PORT__");
            dbname = ElementParameterParser.getValue(node, "__DBNAME__");
            dbuser = ElementParameterParser.getValue(node, "__USER__");
            
            boolean useLDAP = !("".equals(ElementParameterParser.getValue(node, "__PASS__")) || "\"\"".equals(ElementParameterParser.getValue(node, "__PASS__")));
            boolean useKrb = "true".equals(ElementParameterParser.getValue(node, "__USE_KRB__"));
            boolean useKeytab = "true".equals(ElementParameterParser.getValue(node, "__USE_KEYTAB__"));
            boolean isImpala = "impala".equalsIgnoreCase(ElementParameterParser.getValue(node, "__IMPALA_DRIVER__"));
            
            String userPrefix = "user";
            String passwordPrefix = "password";
            String authPrefix = "";
            
            if (isImpala) {
                userPrefix = "UID";
                passwordPrefix = "PWD";
                authPrefix = ";AuthMech=3";
            }	
            
%>
                String driverClass_<%=cid%> = "<%=this.getDirverClassName(node) %>";
                java.lang.Class jdbcclazz_<%=cid%> = java.lang.Class.forName(driverClass_<%=cid%>);
<%
                newInstance(node);
%>
                String dbUser_<%=cid %> = <%=dbuser%>;
                
                <%
                String passwordFieldName = "__PASS__";
                %>
                <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

                String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;
                <%this.setURL(node);%>
                <%
                log4jCodeGenerateUtil.debugConnectionParams(node);
                if (!needUserAndPassword){
                    log4jCodeGenerateUtil.connect_begin_noUser();
                } else {
                    log4jCodeGenerateUtil.connect_begin();
                }

            if (useLDAP) {
%>
                conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>+"<%=authPrefix%>"+";<%=userPrefix%>="+dbUser_<%=cid%>+";<%=passwordPrefix%>="+dbPwd_<%=cid%>);
<%
            } else if (useKrb)  {
                if(useKeytab) {
%>					
                    conn_<%=cid%> = (java.sql.Connection) ugi_<%=cid%>.doAs(new java.security.PrivilegedExceptionAction<Object>() {
                    public Object run() {
                        java.sql.Connection con = null;

                        try {
                            con = java.sql.DriverManager.getConnection(con_url_<%=cid %>);
                        } catch (java.sql.SQLException e) {
                            e.printStackTrace();
                        }
                        return con;
                    }});
                    
                <% } else { %>
                
                    conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>);
                
                <% } %>			
            
<%
            } else if(needUserAndPassword) {
%>
                conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>,dbUser_<%=cid%>,dbPwd_<%=cid%>);
<%
            }  else  {
%>
                conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>);
<%
            }
            
            log4jCodeGenerateUtil.connect_end();
            this.afterUseNewConnection(node);
        }
    
        public String getDirverClassName(INode node){
            String impalaDriver = ElementParameterParser.getValue(node, "__IMPALA_DRIVER__").toLowerCase();
            if ("hive2".equalsIgnoreCase(impalaDriver)) {
                return "org.apache.hive.jdbc.HiveDriver";
            }
            if ("impala".equalsIgnoreCase(impalaDriver)) {
                return "com.cloudera.impala.jdbc.Driver";
            }
            return "";
        }
        
        public void afterUseExistConnection(INode node) {
            String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
            String db = "db_" + connection;
%>
            String dbname_<%=cid%> = (String)globalMap.get("<%=db%>");
            if(dbname_<%=cid%>!=null && !"".equals(dbname_<%=cid%>.trim()) && !"default".equals(dbname_<%=cid%>.trim())) {
                java.sql.Statement goToDatabase_<%=cid%> = conn_<%=cid%>.createStatement();
                goToDatabase_<%=cid%>.execute("use " + dbname_<%=cid%>);
                goToDatabase_<%=cid%>.close();
            }
<%
        }
        
        public void afterUseNewConnection(INode node) {
%>
            String dbname_<%=cid%> = <%=dbname%>;
            if(dbname_<%=cid%>!=null && !"".equals(dbname_<%=cid%>.trim()) && !"default".equals(dbname_<%=cid%>.trim())) {
                java.sql.Statement goToDatabase_<%=cid%> = conn_<%=cid%>.createStatement();
                goToDatabase_<%=cid%>.execute("use " + dbname_<%=cid%>);
                goToDatabase_<%=cid%>.close();
            }
<%
        }
    }
    
    dbInputBeginUtil = new DBInputBeginUtil();
    
    String impalaVersion = ElementParameterParser.getValue(inputNode, "__IMPALA_VERSION__");
    String distribution = ElementParameterParser.getValue(inputNode, "__DISTRIBUTION__");
    
    if(useExistingConnection) {
        distribution = "";
        impalaVersion = "";
        String connection = ElementParameterParser.getValue(inputNode, "__CONNECTION__");
        for (INode pNode : inputNode.getProcess().getNodesOfType("tHiveConnection")) {
            if(connection!=null && connection.equals(pNode.getUniqueName())) {
                distribution = ElementParameterParser.getValue(pNode, "__DISTRIBUTION__");
                impalaVersion = ElementParameterParser.getValue(pNode, "__HIVE_VERSION__");
                break;
            }
        }
    }
    
    boolean isCustom = "CUSTOM".equals(distribution);
%>

<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/DB/Input/AbstractDBInputBegin.javajet"%>